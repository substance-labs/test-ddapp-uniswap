import{useQuery as v}from"./useQuery-D_ZCw8XG.js";import{isMessage as d}from"./proto3-DkSQZto4.js";import{useTransport as Q}from"./use-transport-CPomNX05.js";function b(e){if(!d(e))return e;const n=e.getType(),r={};for(const t of n.fields.byMember()){const o=e[t.localName];let s;if(t.repeated)s=o.map(i=>a(i));else if(t.kind=="map"){s={};for(const[i,u]of Object.entries(o))s[i]=a(u)}else t.kind=="oneof"?s=t.findField(o.case)?{case:o.case,value:a(o.value)}:{case:void 0}:s=a(o);r[t.localName]=s}return r}function a(e){if(e===void 0)return e;if(d(e))return b(e);if(e instanceof Uint8Array){const n=new Uint8Array(e.byteLength);return n.set(e),n}return e}const c=Symbol("disableQuery");function g(e,n){if(!e)throw new Error(`Invalid assertion: ${n}`)}function l(e,n){return[e.service.typeName,e.name,b(new e.I(n===c||!n?{}:n))]}function k(e,n){return[...l(e,n),"infinite"]}async function w(e,n,{callOptions:r,transport:t}){return(await t.unary({typeName:e.service.typeName,methods:{}},e,r==null?void 0:r.signal,r==null?void 0:r.timeoutMs,r==null?void 0:r.headers,n??{})).message}function M(e,n,{callOptions:r,transport:t}){return async o=>(g(n!==c,"Disabled query cannot be fetched"),w(e,n,{callOptions:{...r,signal:(r==null?void 0:r.signal)??o.signal},transport:t}))}function N(e,n,{transport:r,callOptions:t}){return{queryKey:l(e,n),queryFn:M(e,n,{transport:r,callOptions:t}),enabled:n===c?!1:void 0}}function q(e,n,{transport:r,callOptions:t,...o}={}){const s=Q(),i=N(e,n,{transport:r??s,callOptions:t}),{enabled:u,...m}=i,f={...o,...m},y=u??o.enabled;return y!==void 0&&(f.enabled=y),v(f)}export{g as assert,w as callUnaryMethod,k as createConnectInfiniteQueryKey,N as createUseQueryOptions,c as disableQuery,q as useQuery};
