import{__toESM as A}from"./chunk-DgAfPHQg.js";import{require_react as D}from"./react-CNoFhWkx.js";import{useTranslation as b}from"./useTranslation-BotBuoJf.js";import{useDispatch as E}from"./es-Iwj7vF3u.js";import{ReactQueryCacheKey as k}from"./cache-BFZkIToX.js";import{CONNECTION_PROVIDER_IDS as I}from"./useEnabledChains-DuB86c95.js";import{getChromeWithThrow as R,logger as u,useEvent as L}from"./hooks-BXO4d1DJ.js";import{UNITAG_VALID_REGEX as F}from"./constants-CZ9iND_H.js";import{UnitagEventName as q}from"./features-yACC1hVw.js";import{InterfaceEventName as v}from"./interface-BdpC4qOF.js";import{useQueryClient as O}from"./useQuery-D_ZCw8XG.js";import{updateIsEmbeddedWalletBackedUp as x}from"./reducer-26KeQlno.js";import{sendAnalyticsEvent as p}from"./send.web-CrSXW2rw.js";import{createNewEmbeddedWallet as M,signInWithPasskey as Q,signMessagesWithPasskey as B,useEmbeddedWalletState as j,walletTypeToAmplitudeWalletType as y}from"./embeddedWallet-BdHUTaHg.js";import{useConnect as S}from"./useConnect-DQZiZ0j4.js";import{v4_default as K}from"./v4-D6Rlvprs.js";import{require_cjs as G}from"./Loader-D83W8G1W.js";import{pushNotification as H}from"./slice-Crjw990S.js";import{WalletConnectionResult as V}from"./types-DhBONJgE.js";import{claimUnitag as X,getUnitagAvatarUploadUrl as Y,updateUnitagMetadata as z}from"./UnitagsApiClient-CvShPRCK.js";import{AppNotificationType as J}from"./types-Ds0gKmju.js";import{isIFramed as Z}from"./isIFramed-Ir4iCEzS.js";import{usePasskeyAuthWithHelpModal as $}from"./usePasskeyAuthWithHelpModal-DfgGEzej.js";let l=(function(e){return e.UnitagNotAvailable="unitags-1",e.RequiresENSMatch="unitags-2",e.IPLimitReached="unitags-3",e.AddressLimitReached="unitags-4",e.DeviceLimitReached="unitags-5",e.DeviceActiveLimitReached="unitags-6",e.AddressActiveLimitReached="unitags-7",e.NoUnitagForAddress="unitags-8",e.UnitagNotActive="unitags-9",e})({});function ee(e,t){switch(t){case l.UnitagNotAvailable:return e("unitags.claim.error.unavailable");case l.IPLimitReached:case l.AddressLimitReached:case l.DeviceLimitReached:return e("unitags.claim.error.general");case l.DeviceActiveLimitReached:return e("unitags.claim.error.deviceLimit");case l.AddressActiveLimitReached:return e("unitags.claim.error.addressLimit");default:return e("unitags.claim.error.unknown")}}const be=e=>{const t=e.replaceAll(" ","").toLowerCase();return F.test(t)?t:"yourname"};var g=A(D());function w(e,t,r){const a=e.find(s=>s.id===t);if(!a&&(r!=null&&r.shouldThrow))throw new Error(`Expected connector ${t} missing from wagmi context.`);return a}function _(e,t){const{connectors:r}=S();return(0,g.useMemo)(()=>t!=null&&t.shouldThrow?w(r,e,t):w(r,e),[r,e,t])}let te=(function(e){return e.OPEN_SIDEBAR="uniswap_openSidebar",e})({});const ke={[te.OPEN_SIDEBAR]:["Tokens","Activity"]};function Le(){const e=_(I.UNISWAP_EXTENSION_RDNS),t=(0,g.useCallback)(async(r,a)=>{const s=await(e==null?void 0:e.getProvider());s.request&&await s.request({method:r,params:[a]})},[e]);return(0,g.useMemo)(()=>e?{...e,extensionRequest:t}:void 0,[e,t])}function re(){const e=O();return L(()=>{e.resetQueries({queryKey:[k.UnitagsApi]}).catch(t=>{u.error(t,{tags:{file:"useResetUnitagsQueries.ts",function:"queryClient.resetQueries"}})})})}var ae=A(G());function U(e){return["file://","content://","/storage/","/data/"].some(r=>e.startsWith(r))}async function se(e,t){if(!t.preSignedUrl||!t.s3UploadFields)return{success:!1};const r=ae.Platform.OS==="android"?e:e.replace("file://",""),a=new FormData;Object.entries(t.s3UploadFields).forEach(([o,n])=>{a.append(o,n)});const c=await(await fetch(r)).blob();a.append("Content-Type",c.type),a.append("file",{uri:r,type:c.type,name:r});try{const o=await fetch(t.preSignedUrl,{method:"POST",headers:{"Content-Type":"multipart/form-data"},body:a});if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);return u.debug("unitags/utils.ts","uploadFileToS3","Avatar uploaded to S3 successfully"),{success:!0}}catch(o){return u.error(o,{tags:{file:"unitags/utils.ts",function:"uploadFileToS3"}}),{success:!1}}}async function ne({username:e,imageUri:t,address:r,signMessage:a}){try{const s=await Y({data:{username:e},address:r,signMessage:a}),{success:c}=await se(t,{preSignedUrl:s.preSignedUrl,s3UploadFields:s.s3UploadFields});return c?(await z({username:e,data:{metadata:{avatar:s.avatarUrl},clearAvatar:!1},address:r,signMessage:a}),{success:!0}):{success:!1}}catch(s){return u.error(s,{tags:{file:"unitags/utils.ts",function:"uploadAndUpdateAvatarAfterClaim"}}),{success:!1}}}const d="USER_ID";async function ie(){const e=await oe();if(e)return e;const t=K();return await ce(t),t}async function oe(){try{const r=(await R().storage.local.get(d))[d];return typeof r=="string"?r:null}catch{return window.localStorage.getItem(d)}}async function ce(e){try{await R().storage.local.set({[d]:e})}catch{window.localStorage.setItem(d,e)}}const ue=()=>{const{t:e}=b(),t=E(),r=re();return async({claim:a,context:s,signMessage:c})=>{const o=await ie();if(!a.address||!o||!c)return u.error("Missing required parameters",{tags:{file:"useClaimUnitag",function:"claimUnitag"}}),{claimError:e("unitags.claim.error.default")};try{const n=await X({data:{username:a.username,deviceId:o,metadata:{avatar:a.avatarUri&&U(a.avatarUri)?void 0:a.avatarUri}},address:a.address,signMessage:c});if(n.errorCode)return{claimError:ee(e,n.errorCode)};if(r(),n.success){if(p(q.UnitagClaimed,s),a.avatarUri&&U(a.avatarUri)){const{success:m}=await ne({username:a.username,imageUri:a.avatarUri,address:a.address,signMessage:c});m||t(H({type:J.Error,errorMessage:e("unitags.claim.error.avatar")}))}r()}return{claimError:void 0}}catch(n){return u.error(n,{tags:{file:"useClaimUnitag",function:"claimUnitag"}}),{claimError:e("unitags.claim.error.default")}}}};function Fe({createNewWallet:e=!1,unitag:t,onSuccess:r,onError:a}={}){const{setIsConnected:s,setWalletAddress:c}=j(),o=S(),n=_(I.EMBEDDED_WALLET_CONNECTOR_ID,{shouldThrow:!0}),m=ue(),T=E(),{mutate:C,mutateAsync:N,...P}=$(async()=>{if(Z(!0))throw new Error("Passkeys are not supported in iframes");if(e){const i=await M(t??"");if(!i)throw new Error("Failed to create wallet for passkey");return t&&(await m({claim:{address:i,username:t},context:{source:"onboarding",hasENSAddress:!1},signMessage:async W=>{const f=await B([W]);return(f==null?void 0:f[0])||""}})).claimError,{walletAddress:i}}else{const i=await Q();if(!i)throw new Error("Failed to sign in with passkey");return i}},{onSuccess:({walletAddress:i,exported:h})=>{T(x({isEmbeddedWalletBackedUp:h??!1})),c(i),s(!0),o.connect({connector:n}),e?p(v.EmbeddedWalletCreated):p(v.WalletConnected,{result:V.Succeeded,wallet_name:n.name,wallet_type:y(n.type),wallet_address:i}),r==null||r()},onError:i=>{e?u.error(i,{tags:{file:"useSignInWithPasskey",function:"onError"}}):u.error(i,{tags:{file:"useSignInWithPasskey",function:"onError"},extra:{wallet_name:n.name,wallet_type:y(n.type)}}),a==null||a(i)}});return{signInWithPasskey:C,signInWithPasskeyAsync:N,...P}}export{te as ExtensionRequestMethods,ie as getUniqueId,be as getYourNameString,Fe as useSignInWithPasskey,Le as useUniswapExtensionConnector};
