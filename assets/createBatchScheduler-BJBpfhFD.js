function p(){let o=()=>{},s=()=>{};return{promise:new Promise((h,i)=>{o=h,s=i}),resolve:o,reject:s}}const v=new Map;function A({fn:o,id:s,shouldSplitBatch:l,wait:h=0,sort:i}){const d=async()=>{const e=u();f();const n=e.map(({args:t})=>t);n.length!==0&&o(n).then(t=>{i&&Array.isArray(t)&&t.sort(i);for(let r=0;r<e.length;r++){const{resolve:c}=e[r];c==null||c([t[r],t])}}).catch(t=>{for(let r=0;r<e.length;r++){const{reject:c}=e[r];c==null||c(t)}})},f=()=>v.delete(s),m=()=>u().map(({args:e})=>e),u=()=>v.get(s)||[],g=e=>v.set(s,[...u(),e]);return{flush:f,async schedule(e){const{promise:n,resolve:t,reject:r}=p();return(l==null?void 0:l([...m(),e]))&&d(),u().length>0?(g({args:e,resolve:t,reject:r}),n):(g({args:e,resolve:t,reject:r}),setTimeout(d,h),n)}}}export{A as createBatchScheduler,p as withResolvers};
