import{InvalidAddressError as m,isAddress as l}from"./isAddress-P2vaZgmG.js";import{concatHex as F,slice as h}from"./slice-cfC6NcyN.js";import{batchGatewayAbi as f,decodeAbiParameters as N,solidityError as P}from"./call-CTDbaN-t.js";import{AbiErrorInputsNotFoundError as I,AbiErrorNotFoundError as w,AbiFunctionNotFoundError as p,AbiFunctionOutputsNotFoundError as R,AbiFunctionSignatureNotFoundError as q,InvalidArrayError as v,encodeAbiParameters as g,formatAbiItem$1 as A,getAbiItem as E,toFunctionSelector as y}from"./encodeFunctionData-CD63gkvM.js";function L(r,o){if(!l(r,{strict:!1}))throw new m({address:r});if(!l(o,{strict:!1}))throw new m({address:o});return r.toLowerCase()===o.toLowerCase()}function x(r){const{abi:o,data:n}=r,e=h(n,0,4),t=o.find(s=>s.type==="function"&&e===y(A(s)));if(!t)throw new q(e,{docsPath:"/docs/contract/decodeFunctionData"});return{functionName:t.name,args:"inputs"in t&&t.inputs&&t.inputs.length>0?N(t.inputs,h(n,4)):void 0}}const u="/docs/contract/encodeErrorResult";function b(r){const{abi:o,errorName:n,args:e}=r;let t=o[0];if(n){const c=E({abi:o,args:e,name:n});if(!c)throw new w(n,{docsPath:u});t=c}if(t.type!=="error")throw new w(void 0,{docsPath:u});const s=A(t),i=y(s);let a="0x";if(e&&e.length>0){if(!t.inputs)throw new I(t.name,{docsPath:u});a=g(t.inputs,e)}return F([i,a])}const d="/docs/contract/encodeFunctionResult";function G(r){const{abi:o,functionName:n,result:e}=r;let t=o[0];if(n){const i=E({abi:o,name:n});if(!i)throw new p(n,{docsPath:d});t=i}if(t.type!=="function")throw new p(void 0,{docsPath:d});if(!t.outputs)throw new R(t.name,{docsPath:d});const s=(()=>{if(t.outputs.length===0)return[];if(t.outputs.length===1)return[e];if(Array.isArray(e))return e;throw new v(e)})();return g(t.outputs,s)}const S="x-batch-gateway:true";async function $(r){const{data:o,ccipRequest:n}=r,{args:[e]}=x({abi:f,data:o}),t=[],s=[];return await Promise.all(e.map(async(i,a)=>{try{s[a]=await n(i),t[a]=!1}catch(c){t[a]=!0,s[a]=H(c)}})),G({abi:f,functionName:"query",result:[t,s]})}function H(r){return r.name==="HttpRequestError"&&r.status?b({abi:f,errorName:"HttpError",args:[r.status,r.shortMessage]}):b({abi:[P],errorName:"Error",args:["shortMessage"in r?r.shortMessage:r.message]})}export{L as isAddressEqual,$ as localBatchGatewayRequest,S as localBatchGatewayUrl};
