function d(e){const t=new Uint8Array(e);let n="";for(const l of t)n+=String.fromCharCode(l);return btoa(n).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}function R(e){const t=e.replace(/-/g,"+").replace(/_/g,"/"),n=(4-t.length%4)%4,r=t.padEnd(t.length+n,"="),l=atob(r),a=new ArrayBuffer(l.length),s=new Uint8Array(a);for(let u=0;u<l.length;u++)s[u]=l.charCodeAt(u);return a}function m(){var e;return T.stubThis(((e=globalThis)===null||e===void 0?void 0:e.PublicKeyCredential)!==void 0&&typeof globalThis.PublicKeyCredential=="function")}const T={stubThis:e=>e};function y(e){const{id:t}=e;return{...e,id:R(t),transports:e.transports}}function O(e){return e==="localhost"||/^([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$/i.test(e)}var i=class extends Error{constructor({message:e,code:t,cause:n,name:r}){super(e,{cause:n}),Object.defineProperty(this,"code",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.name=r??n.name,this.code=t}};function _({error:e,options:t}){const{publicKey:n}=t;if(!n)throw Error("options was missing required publicKey property");if(e.name==="AbortError"){if(t.signal instanceof AbortSignal)return new i({message:"Registration ceremony was sent an abort signal",code:"ERROR_CEREMONY_ABORTED",cause:e})}else if(e.name==="ConstraintError"){var r,l,a;if(((r=n.authenticatorSelection)===null||r===void 0?void 0:r.requireResidentKey)===!0)return new i({message:"Discoverable credentials were required but no available authenticator supported it",code:"ERROR_AUTHENTICATOR_MISSING_DISCOVERABLE_CREDENTIAL_SUPPORT",cause:e});if(t.mediation==="conditional"&&((l=n.authenticatorSelection)===null||l===void 0?void 0:l.userVerification)==="required")return new i({message:"User verification was required during automatic registration but it could not be performed",code:"ERROR_AUTO_REGISTER_USER_VERIFICATION_FAILURE",cause:e});if(((a=n.authenticatorSelection)===null||a===void 0?void 0:a.userVerification)==="required")return new i({message:"User verification was required but no available authenticator supported it",code:"ERROR_AUTHENTICATOR_MISSING_USER_VERIFICATION_SUPPORT",cause:e})}else{if(e.name==="InvalidStateError")return new i({message:"The authenticator was previously registered",code:"ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED",cause:e});if(e.name==="NotAllowedError")return new i({message:e.message,code:"ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",cause:e});if(e.name==="NotSupportedError")return n.pubKeyCredParams.filter(u=>u.type==="public-key").length===0?new i({message:'No entry in pubKeyCredParams was of type "public-key"',code:"ERROR_MALFORMED_PUBKEYCREDPARAMS",cause:e}):new i({message:"No available authenticator supported any of the specified pubKeyCredParams algorithms",code:"ERROR_AUTHENTICATOR_NO_SUPPORTED_PUBKEYCREDPARAMS_ALG",cause:e});if(e.name==="SecurityError"){const s=globalThis.location.hostname;if(O(s)){if(n.rp.id!==s)return new i({message:`The RP ID "${n.rp.id}" is invalid for this domain`,code:"ERROR_INVALID_RP_ID",cause:e})}else return new i({message:`${globalThis.location.hostname} is an invalid domain`,code:"ERROR_INVALID_DOMAIN",cause:e})}else if(e.name==="TypeError"){if(n.user.id.byteLength<1||n.user.id.byteLength>64)return new i({message:"User ID was not between 1 and 64 characters",code:"ERROR_INVALID_USER_ID_LENGTH",cause:e})}else if(e.name==="UnknownError")return new i({message:"The authenticator was unable to process the specified options, or could not create a new credential",code:"ERROR_AUTHENTICATOR_GENERAL_ERROR",cause:e})}return e}var I=class{constructor(){Object.defineProperty(this,"controller",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}createNewAbortSignal(){if(this.controller){const t=new Error("Cancelling existing WebAuthn API call for new one");t.name="AbortError",this.controller.abort(t)}const e=new AbortController;return this.controller=e,e.signal}cancelCeremony(){if(this.controller){const e=new Error("Manually cancelling existing WebAuthn API call");e.name="AbortError",this.controller.abort(e),this.controller=void 0}}};const S=new I,N=["cross-platform","platform"];function v(e){if(e&&!(N.indexOf(e)<0))return e}async function P(e){var t;!e.optionsJSON&&e.challenge&&(console.warn("startRegistration() was not called correctly. It will try to continue with the provided options, but this call should be refactored to use the expected call structure instead. See https://simplewebauthn.dev/docs/packages/browser#typeerror-cannot-read-properties-of-undefined-reading-challenge for more information."),e={optionsJSON:e});const{optionsJSON:n,useAutoRegister:r=!1}=e;if(!m())throw new Error("WebAuthn is not supported in this browser");const l={...n,challenge:R(n.challenge),user:{...n.user,id:R(n.user.id)},excludeCredentials:(t=n.excludeCredentials)===null||t===void 0?void 0:t.map(y)},a={};r&&(a.mediation="conditional"),a.publicKey=l,a.signal=S.createNewAbortSignal();let s;try{s=await navigator.credentials.create(a)}catch(c){throw _({error:c,options:a})}if(!s)throw new Error("Registration was not completed");const{id:u,rawId:f,response:o,type:w}=s;let p;typeof o.getTransports=="function"&&(p=o.getTransports());let h;if(typeof o.getPublicKeyAlgorithm=="function")try{h=o.getPublicKeyAlgorithm()}catch(c){A("getPublicKeyAlgorithm()",c)}let g;if(typeof o.getPublicKey=="function")try{const c=o.getPublicKey();c!==null&&(g=d(c))}catch(c){A("getPublicKey()",c)}let b;if(typeof o.getAuthenticatorData=="function")try{b=d(o.getAuthenticatorData())}catch(c){A("getAuthenticatorData()",c)}return{id:u,rawId:d(f),response:{attestationObject:d(o.attestationObject),clientDataJSON:d(o.clientDataJSON),transports:p,publicKeyAlgorithm:h,publicKey:g,authenticatorData:b},type:w,clientExtensionResults:s.getClientExtensionResults(),authenticatorAttachment:v(s.authenticatorAttachment)}}function A(e,t){console.warn(`The browser extension that intercepted this WebAuthn API call incorrectly implemented ${e}. You should report this error to them.
`,t)}function C(){if(!m())return E.stubThis(new Promise(t=>t(!1)));const e=globalThis.PublicKeyCredential;return(e==null?void 0:e.isConditionalMediationAvailable)===void 0?E.stubThis(new Promise(t=>t(!1))):E.stubThis(e.isConditionalMediationAvailable())}const E={stubThis:e=>e};function D({error:e,options:t}){const{publicKey:n}=t;if(!n)throw Error("options was missing required publicKey property");if(e.name==="AbortError"){if(t.signal instanceof AbortSignal)return new i({message:"Authentication ceremony was sent an abort signal",code:"ERROR_CEREMONY_ABORTED",cause:e})}else{if(e.name==="NotAllowedError")return new i({message:e.message,code:"ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",cause:e});if(e.name==="SecurityError"){const r=globalThis.location.hostname;if(O(r)){if(n.rpId!==r)return new i({message:`The RP ID "${n.rpId}" is invalid for this domain`,code:"ERROR_INVALID_RP_ID",cause:e})}else return new i({message:`${globalThis.location.hostname} is an invalid domain`,code:"ERROR_INVALID_DOMAIN",cause:e})}else if(e.name==="UnknownError")return new i({message:"The authenticator was unable to process the specified options, or could not create a new assertion signature",code:"ERROR_AUTHENTICATOR_GENERAL_ERROR",cause:e})}return e}async function U(e){var t,n;!e.optionsJSON&&e.challenge&&(console.warn("startAuthentication() was not called correctly. It will try to continue with the provided options, but this call should be refactored to use the expected call structure instead. See https://simplewebauthn.dev/docs/packages/browser#typeerror-cannot-read-properties-of-undefined-reading-challenge for more information."),e={optionsJSON:e});const{optionsJSON:r,useBrowserAutofill:l=!1,verifyBrowserAutofillInput:a=!0}=e;if(!m())throw new Error("WebAuthn is not supported in this browser");let s;((t=r.allowCredentials)===null||t===void 0?void 0:t.length)!==0&&(s=(n=r.allowCredentials)===null||n===void 0?void 0:n.map(y));const u={...r,challenge:R(r.challenge),allowCredentials:s},f={};if(l){if(!await C())throw Error("Browser does not support WebAuthn autofill");if(document.querySelectorAll("input[autocomplete$='webauthn']").length<1&&a)throw Error('No <input> with "webauthn" as the only or last value in its `autocomplete` attribute was detected');f.mediation="conditional",u.allowCredentials=[]}f.publicKey=u,f.signal=S.createNewAbortSignal();let o;try{o=await navigator.credentials.get(f)}catch(c){throw D({error:c,options:f})}if(!o)throw new Error("Authentication was not completed");const{id:w,rawId:p,response:h,type:g}=o;let b;return h.userHandle&&(b=d(h.userHandle)),{id:w,rawId:d(p),response:{authenticatorData:d(h.authenticatorData),clientDataJSON:d(h.clientDataJSON),signature:d(h.signature),userHandle:b},type:g,clientExtensionResults:o.getClientExtensionResults(),authenticatorAttachment:v(o.authenticatorAttachment)}}async function K(e){return JSON.stringify(await P({optionsJSON:JSON.parse(e)}))}async function J(e){return e.length?JSON.stringify(await U({optionsJSON:JSON.parse(e)})):""}export{J as authenticatePasskey,K as registerPasskey};
