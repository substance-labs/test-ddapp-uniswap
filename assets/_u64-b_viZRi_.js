import{__esm as h}from"./chunk-DgAfPHQg.js";var u,A=h({"../../node_modules/@noble/hashes/esm/crypto.js"(){u=typeof globalThis=="object"&&"crypto"in globalThis?globalThis.crypto:void 0}});function H(t){return t instanceof Uint8Array||ArrayBuffer.isView(t)&&t.constructor.name==="Uint8Array"}function p(t){if(!Number.isSafeInteger(t)||t<0)throw new Error("positive integer expected, got "+t)}function l(t,...e){if(!H(t))throw new Error("Uint8Array expected");if(e.length>0&&!e.includes(t.length))throw new Error("Uint8Array expected of length "+e+", got length="+t.length)}function J(t){if(typeof t!="function"||typeof t.create!="function")throw new Error("Hash should be wrapped by utils.createHasher");p(t.outputLen),p(t.blockLen)}function P(t,e=!0){if(t.destroyed)throw new Error("Hash instance has been destroyed");if(e&&t.finished)throw new Error("Hash#digest() has already been called")}function Q(t,e){l(t);const n=e.outputLen;if(t.length<n)throw new Error("digestInto() expects output buffer of length at least "+n)}function W(t){return new Uint32Array(t.buffer,t.byteOffset,Math.floor(t.byteLength/4))}function X(...t){for(let e=0;e<t.length;e++)t[e].fill(0)}function Y(t){return new DataView(t.buffer,t.byteOffset,t.byteLength)}function Z(t,e){return t<<32-e|t>>>e}function x(t){return t<<24&4278190080|t<<8&16711680|t>>>8&65280|t>>>24&255}function B(t){for(let e=0;e<t.length;e++)t[e]=x(t[e]);return t}function $(t){if(l(t),y)return t.toHex();let e="";for(let n=0;n<t.length;n++)e+=m[t[n]];return e}function g(t){if(t>=f._0&&t<=f._9)return t-f._0;if(t>=f.A&&t<=f.F)return t-(f.A-10);if(t>=f.a&&t<=f.f)return t-(f.a-10)}function tt(t){if(typeof t!="string")throw new Error("hex string expected, got "+typeof t);if(y)return Uint8Array.fromHex(t);const e=t.length,n=e/2;if(e%2)throw new Error("hex string expected, got unpadded hex of length "+e);const r=new Uint8Array(n);for(let o=0,i=0;o<n;o++,i+=2){const s=g(t.charCodeAt(i)),c=g(t.charCodeAt(i+1));if(s===void 0||c===void 0){const b=t[i]+t[i+1];throw new Error('hex string expected, got non-hex character "'+b+'" at index '+i)}r[o]=s*16+c}return r}function _(t){if(typeof t!="string")throw new Error("string expected");return new Uint8Array(new TextEncoder().encode(t))}function U(t){return typeof t=="string"&&(t=_(t)),l(t),t}function et(...t){let e=0;for(let r=0;r<t.length;r++){const o=t[r];l(o),e+=o.length}const n=new Uint8Array(e);for(let r=0,o=0;r<t.length;r++){const i=t[r];n.set(i,o),o+=i.length}return n}function nt(t){const e=r=>t().update(U(r)).digest(),n=t();return e.outputLen=n.outputLen,e.blockLen=n.blockLen,e.create=()=>t(),e}function rt(t=32){if(u&&typeof u.getRandomValues=="function")return u.getRandomValues(new Uint8Array(t));if(u&&typeof u.randomBytes=="function")return Uint8Array.from(u.randomBytes(t));throw new Error("crypto.getRandomValues must be defined")}var w,L,y,m,f,E,ot=h({"../../node_modules/@noble/hashes/esm/utils.js"(){A(),w=new Uint8Array(new Uint32Array([287454020]).buffer)[0]===68,L=w?t=>t:B,y=typeof Uint8Array.from([]).toHex=="function"&&typeof Uint8Array.fromHex=="function",m=Array.from({length:256},(t,e)=>e.toString(16).padStart(2,"0")),f={_0:48,_9:57,A:65,F:70,a:97,f:102},E=class{}}});function S(t,e=!1){return e?{h:Number(t&a),l:Number(t>>d&a)}:{h:Number(t>>d&a)|0,l:Number(t&a)|0}}function it(t,e=!1){const n=t.length;let r=new Uint32Array(n),o=new Uint32Array(n);for(let i=0;i<n;i++){const{h:s,l:c}=S(t[i],e);[r[i],o[i]]=[s,c]}return[r,o]}function ft(t,e,n,r){const o=(e>>>0)+(r>>>0);return{h:t+n+(o/2**32|0)|0,l:o|0}}var a,d,v,T,V,I,N,j,k,R,F,M,O,C,D,K,q,z,ut=h({"../../node_modules/@noble/hashes/esm/_u64.js"(){a=BigInt(2**32-1),d=BigInt(32),v=(t,e,n)=>t>>>n,T=(t,e,n)=>t<<32-n|e>>>n,V=(t,e,n)=>t>>>n|e<<32-n,I=(t,e,n)=>t<<32-n|e>>>n,N=(t,e,n)=>t<<64-n|e>>>n-32,j=(t,e,n)=>t>>>n-32|e<<64-n,k=(t,e,n)=>t<<n|e>>>32-n,R=(t,e,n)=>e<<n|t>>>32-n,F=(t,e,n)=>e<<n-32|t>>>64-n,M=(t,e,n)=>t<<n-32|e>>>64-n,O=(t,e,n)=>(t>>>0)+(e>>>0)+(n>>>0),C=(t,e,n,r)=>e+n+r+(t/2**32|0)|0,D=(t,e,n,r)=>(t>>>0)+(e>>>0)+(n>>>0)+(r>>>0),K=(t,e,n,r,o)=>e+n+r+o+(t/2**32|0)|0,q=(t,e,n,r,o)=>(t>>>0)+(e>>>0)+(n>>>0)+(r>>>0)+(o>>>0),z=(t,e,n,r,o,i)=>e+n+r+o+i+(t/2**32|0)|0}});export{E as Hash,l as abytes,ft as add,C as add3H,O as add3L,K as add4H,D as add4L,z as add5H,q as add5L,P as aexists,J as ahash,p as anumber,Q as aoutput,$ as bytesToHex,X as clean,et as concatBytes,nt as createHasher,Y as createView,tt as hexToBytes,ut as init__u64,ot as init_utils,H as isBytes,rt as randomBytes,F as rotlBH,M as rotlBL,k as rotlSH,R as rotlSL,Z as rotr,N as rotrBH,j as rotrBL,V as rotrSH,I as rotrSL,v as shrSH,T as shrSL,it as split,L as swap32IfBE,U as toBytes,W as u32};
