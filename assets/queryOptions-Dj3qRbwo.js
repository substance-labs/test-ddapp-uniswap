import{__toESM as R}from"./chunk-DgAfPHQg.js";import{logger as w}from"./hooks-BXO4d1DJ.js";import{createApi as g,fetchBaseQuery as E}from"./api-BsCrUy1C.js";import{InterfaceEventName as S}from"./interface-BdpC4qOF.js";import{require_dist$1 as C}from"./V3DutchOrderTrade-Cl7yELmp.js";import{INTERNAL_ROUTER_PREFERENCE_PRICE as y,QuoteIntent as P,QuoteMethod as O,QuoteState as I,RouterPreference as A,URAQuoteType as r}from"./types-DbOmsKtk.js";import{require_ms as N}from"./ms-BqmEYo6j.js";import{isExactInput as v,transformQuoteToTrade as b}from"./analytics-Ccvj1WVk.js";import{sendAnalyticsEvent as D}from"./send.web-CrSXW2rw.js";import{logSwapQuoteFetch as F}from"./useUSDCPrice-HO7Wgroz.js";var T=R(C()),k=R(N());const h="https://interface.gateway.uniswap.org/v2";if(h===void 0)throw new Error("UNISWAP_GATEWAY_DNS_URL must be defined environment variables");const q=[T.Protocol.V2,T.Protocol.V3,T.Protocol.MIXED],X={enableUniversalRouter:!0};function V(n){const{account:e,uniswapXForceSyntheticQuotes:u,routerPreference:c,protocolPreferences:i,routingType:a}=n,p={useSyntheticQuotes:u,swapper:e,routingType:r.DUTCH_V1},d={routingType:r.PRIORITY,swapper:e},f={useSyntheticQuotes:u,swapper:e,routingType:r.DUTCH_V2},l={useSyntheticQuotes:u,swapper:e,routingType:r.DUTCH_V3},s={...X,protocols:i&&i.length>0?i:q,routingType:r.CLASSIC,recipient:e,enableFeeOnTransferFeeFetching:!0};if(c===A.API||c===y||a===r.CLASSIC)return[s];let o;switch(a){case r.PRIORITY:o=d;break;case r.DUTCH_V3:o=l;break;case r.DUTCH_V2:o=f;break;default:o=p}return[o,s]}const Q=g({reducerPath:"routingApi",baseQuery:E(),endpoints:n=>({getQuote:n.query({async queryFn(e,u,c,i){F({chainId:e.tokenInChainId,isUSDQuote:e.routerPreference===y});const{tokenInAddress:a,tokenInChainId:p,tokenOutAddress:d,tokenOutChainId:f,amount:l,tradeType:s,sendPortionEnabled:o}=e,_={tokenInChainId:p,tokenIn:a,tokenOutChainId:f,tokenOut:d,amount:l,sendPortionEnabled:o,type:v(s)?"EXACT_INPUT":"EXACT_OUTPUT",intent:e.routerPreference===y?P.Pricing:P.Quote,configs:V(e),useUniswapX:e.routerPreference===A.X,swapper:e.account};try{const t=await i({method:"POST",url:`${h}/quote`,body:JSON.stringify(_),headers:{"x-request-source":"uniswap-web"}});if(t.error)try{const m=t.error.data;if(typeof m=="object"&&(m.errorCode==="NO_ROUTE"||m.detail==="No quotes available"))return D(S.NoQuoteReceivedFromRoutingAPI,{requestBody:_,response:t,routerPreference:e.routerPreference}),{data:{state:I.NOT_FOUND}}}catch{throw t.error}const U=t.data;return{data:{...await b({args:e,data:U,quoteMethod:O.ROUTING_API})}}}catch(t){w.warn("routing/slice","queryFn",`GetQuote failed on Unified Routing API, falling back to client: ${(t==null?void 0:t.message)??(t==null?void 0:t.detail)??t}`)}return{data:{state:I.NOT_FOUND}}},keepUnusedDataFor:(0,k.default)("10s"),extraOptions:{maxRetries:0}})})}),{useGetQuoteQuery:z}=Q,K=Q.endpoints.getQuote.useQueryState;function Z(n){return{...n,gcTime:0,staleTime:0}}export{Z as queryWithoutCache,Q as routingApi,z as useGetQuoteQuery,K as useGetQuoteQueryState};
