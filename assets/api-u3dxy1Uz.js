import{ReactQueryCacheKey as m}from"./cache-BFZkIToX.js";import{Platform as s,UniverseChainId as u}from"./utils-BX1Fu73x.js";import{areAddressesEqual as d}from"./currencyId-Ci6selsx.js";import{ONE_MINUTE_MS as l}from"./time-D_OqcZ4M.js";import{skipToken as f,useQuery as w}from"./useQuery-D_ZCw8XG.js";import{createEthersProvider as h}from"./createEthersProvider-B5AW2bpJ.js";let n=(function(e){return e.Name="name",e.Address="address",e.Avatar="avatar",e.Description="description",e.TwitterUsername="com.twitter",e})({});async function v(e,t){const r=await t.lookupAddress(e),a=r?await t.resolveName(r):null;return d({addressInput1:{address:a,platform:s.EVM},addressInput2:{address:e,platform:s.EVM}})?r:null}async function A(e,t){return await t.resolveName(e)}async function N(e,t){const r=await t.lookupAddress(e),a=r?await t.resolveName(r):null,i=d({addressInput1:{address:e,platform:s.EVM},addressInput2:{address:a,platform:s.EVM}})?r:null;return i?await t.getAvatar(i):null}async function c({key:e,name:t,provider:r}){const a=await r.getResolver(t);return(a==null?void 0:a.getText(e))??null}async function p(e){const{type:t,nameOrAddress:r}=e,a=h({chainId:u.Mainnet});if(!a)return null;switch(t){case n.Name:return await v(r,a);case n.Address:return await A(r,a);case n.Avatar:return await N(r,a);case n.Description:return await c({key:"description",name:r,provider:a});case n.TwitterUsername:return await c({key:"com.twitter",name:r,provider:a});default:throw new Error(`Invalid ENS lookup type: ${t}`)}}function o(e,t){return w({queryKey:[m.OnchainENS,e,t],queryFn:t?async()=>await p({type:e,nameOrAddress:t,chainId:u.Mainnet}):f,staleTime:5*l})}function x(e){return o(n.Name,e)}function S(e){return o(n.Address,e)}function k(e){return o(n.Avatar,e)}export{S as useAddressFromEns,k as useENSAvatar,x as useENSName};
