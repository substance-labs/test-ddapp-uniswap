import{__toESM as P}from"./chunk-DgAfPHQg.js";import{require_react as z}from"./react-CNoFhWkx.js";import{isInterface as Q}from"./index.web-BqgtOHN3.js";import{useSelector as k}from"./es-Iwj7vF3u.js";import{require_jsx_runtime as X}from"./jsx-runtime-D7bMTQeG.js";import{isTestEnv as Z,logger as $,useEvent as ee}from"./hooks-BXO4d1DJ.js";import{ALL_CHAIN_IDS as d,UniverseChainId as c,filterChainIdsByFeatureFlag as te,getEnabledChains as K,isTestnetChain as ne}from"./utils-BX1Fu73x.js";import{ChainsConfigKey as se,DynamicConfigs as ue}from"./configs-B4dDdw82.js";import{FeatureFlags as C,getFeatureFlag as U,useDynamicConfigValue as ae,useFeatureFlag as x}from"./hooks-Bp0VtWbX.js";const he=e=>e.userSettings.hideSmallBalances,Te=e=>e.userSettings.hideSpamTokens,Ae=e=>e.userSettings.currentLanguage,j=e=>e.userSettings.isTestnetModeEnabled??!1,B={WALLET_CONNECT_CONNECTOR_ID:"walletConnect",UNISWAP_WALLET_CONNECT_CONNECTOR_ID:"uniswapWalletConnect",INJECTED_CONNECTOR_TYPE:"injected",COINBASE_SDK_CONNECTOR_ID:"coinbaseWalletSDK",COINBASE_RDNS:"com.coinbase.wallet",METAMASK_RDNS:"io.metamask",UNISWAP_EXTENSION_RDNS:"org.uniswap.app",SAFE_CONNECTOR_ID:"safe",EMBEDDED_WALLET_CONNECTOR_ID:"embeddedUniswapWalletConnector",BINANCE_WALLET_CONNECTOR_ID:"wallet.binance.com",BINANCE_WALLET_RDNS:"com.binance.wallet",MOCK_CONNECTOR_ID:"mock"},ge={WALLET_CONNECT:"WalletConnect",EMBEDDED_WALLET:"Uniswap Embedded Wallet",METAMASK:"MetaMask",UNISWAP_EXTENSION:"Uniswap Extension",UNISWAP_WALLET:"Uniswap Wallet",PHANTOM:"Phantom",COINBASE_SDK:"Coinbase Wallet",SAFE:"Safe",BINANCE_WALLET:"Binance Wallet"};var s=P(z()),re=P(X());const S=(0,s.createContext)(null);function Me({children:e,connector:t,navigateToBuyOrReceiveWithEmptyWallet:n,navigateToFiatOnRamp:u,navigateToSwapFlow:a,navigateToSendFlow:r,navigateToReceive:i,navigateToTokenDetails:o,navigateToExternalProfile:N,navigateToNftDetails:m,navigateToNftCollection:_,navigateToPoolDetails:I,handleShareToken:f,onSwapChainsChanged:O,signer:h,useProviderHook:T,useWalletDisplayName:A,onConnectWallet:g,getCanSignPermits:M,getIsUniswapXSupported:W,handleOnPressUniswapXUnsupported:p,getCanBatchTransactions:L,getSwapDelegationInfo:D}){const[w,q]=(0,s.useState)(),[b,v]=(0,s.useState)(),[F,G]=(0,s.useState)(!1),J=(0,s.useMemo)(()=>({connector:t,navigateToBuyOrReceiveWithEmptyWallet:n,navigateToFiatOnRamp:u,navigateToSwapFlow:a,navigateToSendFlow:r,navigateToReceive:i,navigateToTokenDetails:o,navigateToExternalProfile:N,navigateToNftCollection:_,navigateToNftDetails:m,navigateToPoolDetails:I,handleShareToken:f,onSwapChainsChanged:({chainId:l,prevChainId:Y,outputChainId:R})=>{O({chainId:l,prevChainId:Y,outputChainId:R}),q(l),v(R)},signer:h,useProviderHook:T,useWalletDisplayName:A,onConnectWallet:g,swapInputChainId:w,swapOutputChainId:b,setSwapOutputChainId:v,isSwapTokenSelectorOpen:F,setIsSwapTokenSelectorOpen:l=>G(l),getCanSignPermits:M,getIsUniswapXSupported:W,handleOnPressUniswapXUnsupported:p,getCanBatchTransactions:L,getSwapDelegationInfo:D}),[t,n,u,a,r,i,o,N,_,m,I,f,h,T,A,g,w,b,F,M,W,p,L,D,O]);return(0,re.jsx)(S.Provider,{value:J,children:e})}function E(){const e=(0,s.useContext)(S);if(!e)throw new Error("useUniswapContext must be used within a UniswapProvider");return e}function We(e){const t=ee(e),n=(0,s.useContext)(S);return n?t(n):void 0}function ie(){return E().connector}function pe(e){return E().useProviderHook(e)}function Le(){return E().signer}const De=H({getSoneiumStatus:()=>U(C.Soneium),getSolanaStatus:()=>U(C.Solana)});function y(){const e=x(C.Soneium),t=x(C.Solana);return(0,s.useMemo)(()=>H({getSoneiumStatus:()=>e,getSolanaStatus:()=>t})(),[e,t])}function H(e){return()=>te({[c.Soneium]:e.getSoneiumStatus(),[c.Solana]:e.getSolanaStatus()})}function oe(e){const t=ae({config:ue.Chains,key:se.OrderedChainIds,defaultValue:d});return(0,s.useMemo)(()=>{const n=t.filter(a=>e.includes(a)),u=e.filter(a=>!t.includes(a));return[...n,...u]},[t,e])}function le(){try{return ie()}catch(e){Q&&!Z()&&$.error(e,{tags:{file:"src/features/settings/hooks",function:"useConnectorWithCatch"}});return}}function V(e){switch(e==null?void 0:e.type){case B.UNISWAP_WALLET_CONNECT_CONNECTOR_ID:case B.WALLET_CONNECT_CONNECTOR_ID:var t,n;return!((t=e.getNamespaceChainsIds)===null||t===void 0)&&t.call(e).length?(n=e.getNamespaceChainsIds)===null||n===void 0?void 0:n.call(e):d;default:return d}}function Ce(){const e=le();return(0,s.useMemo)(()=>V(e),[e])}function we(e){const{isTestnetModeEnabled:t}=de();return ne(e??c.Mainnet)?!t:t}function de(e){const t=y(),n=Ce(),u=k(j),{chains:a,gqlChains:r,defaultChainId:i}=(0,s.useMemo)(()=>K({platform:e==null?void 0:e.platform,includeTestnets:e==null?void 0:e.includeTestnets,isTestnetModeEnabled:u,connectedWalletChainIds:n,featureFlaggedChainIds:t}),[e==null?void 0:e.platform,e==null?void 0:e.includeTestnets,u,n,t]),o=oe(a);return(0,s.useMemo)(()=>({chains:o,gqlChains:r,defaultChainId:i,isTestnetModeEnabled:u}),[i,r,u,o])}function be(e){const t=y(),n=(0,s.useMemo)(()=>V(e),[e]),u=k(j);return(0,s.useMemo)(()=>K({isTestnetModeEnabled:u,connectedWalletChainIds:n,featureFlaggedChainIds:t}),[u,n,t])}export{B as CONNECTION_PROVIDER_IDS,ge as CONNECTION_PROVIDER_NAMES,Me as UniswapProvider,De as getFeatureFlaggedChainIds,Ae as selectCurrentLanguage,j as selectIsTestnetModeEnabled,he as selectWalletHideSmallBalancesSetting,Te as selectWalletHideSpamTokensSetting,de as useEnabledChains,be as useEnabledChainsWithConnector,we as useIsModeMismatch,pe as useProvider,Le as useSigner,E as useUniswapContext,We as useUniswapContextSelector};
