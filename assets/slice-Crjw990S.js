import{createSlice as s}from"./redux-toolkit.esm-BnRUBto_.js";const a={notificationQueue:[],notificationStatus:{},lastTxNotificationUpdate:{}},c=s({name:"notifications",initialState:a,reducers:{pushNotification:(i,t)=>{i.notificationQueue.push(t.payload)},popNotification:(i,t)=>{const{address:o}=t.payload;if(!o)i.notificationQueue.shift();else{const e=i.notificationQueue.findIndex(n=>n.address===o);e!==-1&&i.notificationQueue.splice(e,1)}},setNotificationViewed:(i,t)=>{const{address:o}=t.payload;if(!o)i.notificationQueue[0]&&(i.notificationQueue[0].shown=!0);else{const e=i.notificationQueue.findIndex(n=>n.address===o);if(e!==-1){const n=i.notificationQueue[e];n&&(n.shown=!0)}}},clearNotificationQueue:i=>{i.notificationQueue=[]},resetNotifications:()=>a,setNotificationStatus:(i,t)=>{const{address:o,hasNotifications:e}=t.payload;i.notificationStatus={...i.notificationStatus,[o]:e}},setLastTxNotificationUpdate:(i,{payload:t})=>{const{address:o,timestamp:e}=t;i.lastTxNotificationUpdate[o]=e}}}),{pushNotification:u,popNotification:d,setNotificationViewed:r,clearNotificationQueue:p,resetNotifications:N,setNotificationStatus:l,setLastTxNotificationUpdate:Q}=c.actions,h=c.reducer;export{p as clearNotificationQueue,h as notificationReducer,u as pushNotification};
