import{BaseError as y,InvalidAddressError as M,bytesToHex as z,isAddress as k,keccak256 as c,numberToHex as H,size as u,stringToHex as v,toHex as g}from"./isAddress-P2vaZgmG.js";import{concat as b}from"./slice-cfC6NcyN.js";import{BytesSizeMismatchError as A,bytesRegex as N,encodeAbiParameters as I,integerRegex as O}from"./encodeFunctionData-CD63gkvM.js";import{stringify as j}from"./stringify-B82RFruy.js";var B=class extends y{constructor({domain:e}){super(`Invalid domain "${j(e)}".`,{metaMessages:["Must be a valid EIP-712 domain."]})}},C=class extends y{constructor({primaryType:e,types:t}){super(`Invalid primary type \`${e}\` must be one of \`${JSON.stringify(Object.keys(t))}\`.`,{docsPath:"/api/glossary/Errors#typeddatainvalidprimarytypeerror",metaMessages:["Check that the primary type is a key in `types`."]})}},R=class extends y{constructor({type:e}){super(`Struct type "${e}" is invalid.`,{metaMessages:["Struct type must not be a Solidity type."],name:"InvalidStructTypeError"})}};function Z(e){const{domain:t={},message:n,primaryType:r}=e,s={EIP712Domain:q({domain:t}),...e.types};J({domain:t,message:n,primaryType:r,types:s});const i=["0x1901"];return t&&i.push(W({domain:t,types:s})),r!=="EIP712Domain"&&i.push(T({data:n,primaryType:r,types:s})),c(b(i))}function W({domain:e,types:t}){return T({data:e,primaryType:"EIP712Domain",types:t})}function T({data:e,primaryType:t,types:n}){const r=x({data:e,primaryType:t,types:n});return c(r)}function x({data:e,primaryType:t,types:n}){const r=[{type:"bytes32"}],s=[F({primaryType:t,types:n})];for(const i of n[t]){const[o,p]=w({types:n,name:i.name,type:i.type,value:e[i.name]});r.push(o),s.push(p)}return I(r,s)}function F({primaryType:e,types:t}){const n=g(V({primaryType:e,types:t}));return c(n)}function V({primaryType:e,types:t}){let n="";const r=E({primaryType:e,types:t});r.delete(e);const s=[e,...Array.from(r).sort()];for(const i of s)n+=`${i}(${t[i].map(({name:o,type:p})=>`${p} ${o}`).join(",")})`;return n}function E({primaryType:e,types:t},n=new Set){const r=e.match(/^\w*/u),s=r==null?void 0:r[0];if(n.has(s)||t[s]===void 0)return n;n.add(s);for(const i of t[s])E({primaryType:i.type,types:t},n);return n}function w({types:e,name:t,type:n,value:r}){if(e[n]!==void 0)return[{type:"bytes32"},c(x({data:r,primaryType:n,types:e}))];if(n==="bytes")return r=`0x${(r.length%2?"0":"")+r.slice(2)}`,[{type:"bytes32"},c(r)];if(n==="string")return[{type:"bytes32"},c(g(r))];if(n.lastIndexOf("]")===n.length-1){const s=n.slice(0,n.lastIndexOf("[")),i=r.map(o=>w({name:t,type:s,types:e,value:o}));return[{type:"bytes32"},c(I(i.map(([o])=>o),i.map(([,o])=>o)))]}return[{type:n},r]}function J(e){const{domain:t,message:n,primaryType:r,types:s}=e,i=(o,p)=>{for(const D of o){const{name:P,type:d}=D,a=p[P],m=d.match(O);if(m&&(typeof a=="number"||typeof a=="bigint")){const[S,f,$]=m;H(a,{signed:f==="int",size:Number.parseInt($)/8})}if(d==="address"&&typeof a=="string"&&!k(a))throw new M({address:a});const l=d.match(N);if(l){const[S,f]=l;if(f&&u(a)!==Number.parseInt(f))throw new A({expectedSize:Number.parseInt(f),givenSize:u(a)})}const h=s[d];h&&(G(d),i(h,a))}};if(s.EIP712Domain&&t){if(typeof t!="object")throw new B({domain:t});i(s.EIP712Domain,t)}if(r!=="EIP712Domain")if(s[r])i(s[r],n);else throw new C({primaryType:r,types:s})}function q({domain:e}){return[typeof(e==null?void 0:e.name)=="string"&&{name:"name",type:"string"},(e==null?void 0:e.version)&&{name:"version",type:"string"},(typeof(e==null?void 0:e.chainId)=="number"||typeof(e==null?void 0:e.chainId)=="bigint")&&{name:"chainId",type:"uint256"},(e==null?void 0:e.verifyingContract)&&{name:"verifyingContract",type:"address"},(e==null?void 0:e.salt)&&{name:"salt",type:"bytes32"}].filter(Boolean)}function G(e){if(e==="address"||e==="bool"||e==="string"||e.startsWith("bytes")||e.startsWith("uint")||e.startsWith("int"))throw new R({type:e})}const K=`Ethereum Signed Message:
`;function L(e){const t=typeof e=="string"?v(e):typeof e.raw=="string"?e.raw:z(e.raw),n=v(`${K}${u(t)}`);return b([n,t])}function _(e,t){return c(L(e),t)}export{_ as hashMessage,Z as hashTypedData};
