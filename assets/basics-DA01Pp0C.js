import{__esm as d,__export as b}from"./chunk-DgAfPHQg.js";function Wr(e,r){if(e.length>=255)throw new TypeError("Alphabet too long");for(var t=new Uint8Array(256),s=0;s<t.length;s++)t[s]=255;for(var n=0;n<e.length;n++){var a=e.charAt(n),o=a.charCodeAt(0);if(t[o]!==255)throw new TypeError(a+" is ambiguous");t[o]=n}var c=e.length,l=e.charAt(0),j=Math.log(c)/Math.log(256),u=Math.log(256)/Math.log(c);function U(i){if(i instanceof Uint8Array||(ArrayBuffer.isView(i)?i=new Uint8Array(i.buffer,i.byteOffset,i.byteLength):Array.isArray(i)&&(i=Uint8Array.from(i))),!(i instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(i.length===0)return"";for(var p=0,E=0,w=0,y=i.length;w!==y&&i[w]===0;)w++,p++;for(var g=(y-w)*u+1>>>0,m=new Uint8Array(g);w!==y;){for(var x=i[w],D=0,v=g-1;(x!==0||D<E)&&v!==-1;v--,D++)x+=256*m[v]>>>0,m[v]=x%c>>>0,x=x/c>>>0;if(x!==0)throw new Error("Non-zero carry");E=D,w++}for(var C=g-E;C!==g&&m[C]===0;)C++;for(var F=l.repeat(p);C<g;++C)F+=e.charAt(m[C]);return F}function P(i){if(typeof i!="string")throw new TypeError("Expected String");if(i.length===0)return new Uint8Array;var p=0;if(i[p]!==" "){for(var E=0,w=0;i[p]===l;)E++,p++;for(var y=(i.length-p)*j+1>>>0,g=new Uint8Array(y);i[p];){var m=t[i.charCodeAt(p)];if(m===255)return;for(var x=0,D=y-1;(m!==0||x<w)&&D!==-1;D--,x++)m+=c*g[D]>>>0,g[D]=m%256>>>0,m=m/256>>>0;if(m!==0)throw new Error("Non-zero carry");w=x,p++}if(i[p]!==" "){for(var v=y-w;v!==y&&g[v]===0;)v++;for(var C=new Uint8Array(E+(y-v)),F=E;v!==y;)C[F++]=g[v++];return C}}}function Qr(i){var p=P(i);if(p)return p;throw new Error(`Non-${r} character`)}return{encode:U,decodeUnsafe:P,decode:Qr}}var ce,he,Le,Xr=d({"../../node_modules/multiformats/esm/vendor/base-x.js"(){ce=Wr,he=ce,Le=he}}),ke={};b(ke,{coerce:()=>A,empty:()=>W,equals:()=>re,fromHex:()=>Pe,fromString:()=>te,isBinary:()=>Fe,toHex:()=>Re,toString:()=>se});var W,Re,Pe,re,A,Fe,te,se,I=d({"../../node_modules/multiformats/esm/src/bytes.js"(){W=new Uint8Array(0),Re=e=>e.reduce((r,t)=>r+t.toString(16).padStart(2,"0"),""),Pe=e=>{const r=e.match(/../g);return r?new Uint8Array(r.map(t=>parseInt(t,16))):W},re=(e,r)=>{if(e===r)return!0;if(e.byteLength!==r.byteLength)return!1;for(let t=0;t<e.byteLength;t++)if(e[t]!==r[t])return!1;return!0},A=e=>{if(e instanceof Uint8Array&&e.constructor.name==="Uint8Array")return e;if(e instanceof ArrayBuffer)return new Uint8Array(e);if(ArrayBuffer.isView(e))return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);throw new Error("Unknown type, must be binary type")},Fe=e=>e instanceof ArrayBuffer||ArrayBuffer.isView(e),te=e=>new TextEncoder().encode(e),se=e=>new TextDecoder().decode(e)}}),be,fe,le,pe,q,N,ue,me,h,S=d({"../../node_modules/multiformats/esm/src/bases/base.js"(){Xr(),I(),be=class{constructor(e,r,t){this.name=e,this.prefix=r,this.baseEncode=t}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}},fe=class{constructor(e,r,t){this.name=e,this.prefix=r,this.baseDecode=t}decode(e){if(typeof e=="string")switch(e[0]){case this.prefix:return this.baseDecode(e.slice(1));default:throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)}else throw Error("Can only multibase decode strings")}or(e){const r={[this.prefix]:this,...e.decoders||{[e.prefix]:e}};return new le(r)}},le=class qe{constructor(r){this.decoders=r}or(r){const t=r.decoders||{[r.prefix]:r};return new qe({...this.decoders,...t})}decode(r){const t=r[0],s=this.decoders[t];if(s)return s.decode(r);throw RangeError(`Unable to decode multibase string ${JSON.stringify(r)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}},pe=class{constructor(e,r,t,s){this.name=e,this.prefix=r,this.baseEncode=t,this.baseDecode=s,this.encoder=new be(e,r,t),this.decoder=new fe(e,r,s)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}},q=({name:e,prefix:r,encode:t,decode:s})=>new pe(e,r,t,s),N=({prefix:e,name:r,alphabet:t})=>{const{encode:s,decode:n}=Le(t,r);return q({prefix:e,name:r,encode:s,decode:a=>A(n(a))})},ue=(e,r,t,s)=>{const n={};for(let u=0;u<r.length;++u)n[r[u]]=u;let a=e.length;for(;e[a-1]==="=";)--a;const o=new Uint8Array(a*t/8|0);let c=0,l=0,j=0;for(let u=0;u<a;++u){const U=n[e[u]];if(U===void 0)throw new SyntaxError(`Non-${s} character`);l=l<<t|U,c+=t,c>=8&&(c-=8,o[j++]=255&l>>c)}if(c>=t||255&l<<8-c)throw new SyntaxError("Unexpected end of data");return o},me=(e,r,t)=>{const s=r[r.length-1]==="=",n=(1<<t)-1;let a="",o=0,c=0;for(let l=0;l<e.length;++l)for(c=c<<8|e[l],o+=8;o>t;)o-=t,a+=r[n&c>>o];if(o&&(a+=r[n&c<<t-o]),s)for(;a.length*t&7;)a+="=";return a},h=({name:e,prefix:r,bitsPerChar:t,alphabet:s})=>q({prefix:r,name:e,encode(n){return me(n,s,t)},decode(n){return ue(n,s,t,e)}})}}),Je={};b(Je,{identity:()=>He});var He,Zr=d({"../../node_modules/multiformats/esm/src/bases/identity.js"(){S(),I(),He=q({prefix:"\0",name:"identity",encode:e=>se(e),decode:e=>te(e)})}}),Ge={};b(Ge,{base2:()=>Ke});var Ke,Yr=d({"../../node_modules/multiformats/esm/src/bases/base2.js"(){S(),Ke=h({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1})}}),Qe={};b(Qe,{base8:()=>We});var We,et=d({"../../node_modules/multiformats/esm/src/bases/base8.js"(){S(),We=h({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3})}}),Xe={};b(Xe,{base10:()=>Ze});var Ze,rt=d({"../../node_modules/multiformats/esm/src/bases/base10.js"(){S(),Ze=N({prefix:"9",name:"base10",alphabet:"0123456789"})}}),Ye={};b(Ye,{base16:()=>er,base16upper:()=>rr});var er,rr,tt=d({"../../node_modules/multiformats/esm/src/bases/base16.js"(){S(),er=h({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),rr=h({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4})}}),tr={};b(tr,{base32:()=>M,base32hex:()=>or,base32hexpad:()=>dr,base32hexpadupper:()=>cr,base32hexupper:()=>ir,base32pad:()=>nr,base32padupper:()=>ar,base32upper:()=>sr,base32z:()=>hr});var M,sr,nr,ar,or,ir,dr,cr,hr,br=d({"../../node_modules/multiformats/esm/src/bases/base32.js"(){S(),M=h({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),sr=h({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),nr=h({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),ar=h({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),or=h({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),ir=h({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),dr=h({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),cr=h({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),hr=h({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5})}}),fr={};b(fr,{base36:()=>lr,base36upper:()=>pr});var lr,pr,st=d({"../../node_modules/multiformats/esm/src/bases/base36.js"(){S(),lr=N({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),pr=N({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"})}}),ur={};b(ur,{base58btc:()=>_,base58flickr:()=>mr});var _,mr,wr=d({"../../node_modules/multiformats/esm/src/bases/base58.js"(){S(),_=N({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),mr=N({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"})}}),vr={};b(vr,{base64:()=>yr,base64pad:()=>gr,base64url:()=>xr,base64urlpad:()=>_r});var yr,gr,xr,_r,nt=d({"../../node_modules/multiformats/esm/src/bases/base64.js"(){S(),yr=h({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),gr=h({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),xr=h({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),_r=h({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6})}});function Cr(e,r,t){r=r||[],t=t||0;for(var s=t;e>=Dr;)r[t++]=e&255|Z,e/=128;for(;e&Sr;)r[t++]=e&255|Z,e>>>=7;return r[t]=e|0,Cr.bytes=t-s+1,r}function X(e,s){var t=0,s=s||0,n=0,a=s,o,c=e.length;do{if(a>=c)throw X.bytes=0,new RangeError("Could not decode varint");o=e[a++],t+=n<28?(o&Y)<<n:(o&Y)*Math.pow(2,n),n+=7}while(o>=Er);return X.bytes=a-s,t}var we,Z,ve,Sr,Dr,ye,Er,Y,ge,xe,_e,Ce,Se,De,Ee,Ae,Ie,je,Ue,ze,T,at=d({"../../node_modules/multiformats/esm/vendor/varint.js"(){we=Cr,Z=128,ve=127,Sr=~ve,Dr=Math.pow(2,31),ye=X,Er=128,Y=127,ge=Math.pow(2,7),xe=Math.pow(2,14),_e=Math.pow(2,21),Ce=Math.pow(2,28),Se=Math.pow(2,35),De=Math.pow(2,42),Ee=Math.pow(2,49),Ae=Math.pow(2,56),Ie=Math.pow(2,63),je=function(e){return e<ge?1:e<xe?2:e<_e?3:e<Ce?4:e<Se?5:e<De?6:e<Ee?7:e<Ae?8:e<Ie?9:10},Ue={encode:we,decode:ye,encodingLength:je},ze=Ue,T=ze}}),Ar={};b(Ar,{decode:()=>k,encodeTo:()=>O,encodingLength:()=>B});var k,O,B,ne=d({"../../node_modules/multiformats/esm/src/varint.js"(){at(),k=e=>[T.decode(e),T.decode.bytes],O=(e,r,t=0)=>(T.encode(e,r,t),r),B=e=>T.encodingLength(e)}}),Ir={};b(Ir,{Digest:()=>L,create:()=>J,decode:()=>ae,equals:()=>oe});var J,ae,oe,L,ie=d({"../../node_modules/multiformats/esm/src/hashes/digest.js"(){I(),ne(),J=(e,r)=>{const t=r.byteLength,s=B(e),n=s+B(t),a=new Uint8Array(n+t);return O(e,a,0),O(t,a,s),a.set(r,n),new L(e,t,r,a)},ae=e=>{const r=A(e),[t,s]=k(r),[n,a]=k(r.subarray(s)),o=r.subarray(s+a);if(o.byteLength!==n)throw new Error("Incorrect length");return new L(t,n,o,r)},oe=(e,r)=>e===r?!0:e.code===r.code&&e.size===r.size&&re(e.bytes,r.bytes),L=class{constructor(e,r,t,s){this.code=e,this.size=r,this.digest=t,this.bytes=s}}}}),jr={};b(jr,{Hasher:()=>ee,from:()=>R});var R,ee,de=d({"../../node_modules/multiformats/esm/src/hashes/hasher.js"(){ie(),R=({name:e,code:r,encode:t})=>new ee(e,r,t),ee=class{constructor(e,r,t){this.name=e,this.code=r,this.encode=t}async digest(e){if(e instanceof Uint8Array){const r=await this.encode(e);return J(this.code,r)}else throw Error("Unknown type, must be binary type")}}}}),Ur={};b(Ur,{sha256:()=>zr,sha512:()=>Mr});var H,zr,Mr,ot=d({"../../node_modules/multiformats/esm/src/hashes/sha2-browser.js"(){de(),H=e=>async r=>new Uint8Array(await crypto.subtle.digest(e,r)),zr=R({name:"sha2-256",code:18,encode:H("SHA-256")}),Mr=R({name:"sha2-512",code:19,encode:H("SHA-512")})}}),Nr={};b(Nr,{identity:()=>Or});var Or,it=d({"../../node_modules/multiformats/esm/src/hashes/identity.js"(){de(),I(),Or=R({name:"identity",code:0,encode:e=>A(e)})}}),Br={};b(Br,{code:()=>$r,decode:()=>Lr,encode:()=>Tr,name:()=>Vr});var G,Vr,$r,Tr,Lr,dt=d({"../../node_modules/multiformats/esm/src/codecs/raw.js"(){I(),G=e=>A(e),{name:Vr,code:$r,encode:Tr,decode:Lr}={name:"raw",code:85,decode:G,encode:G}}}),kr={};b(kr,{code:()=>Pr,decode:()=>qr,encode:()=>Fr,name:()=>Rr});var Rr,Pr,Fr,qr,ct=d({"../../node_modules/multiformats/esm/src/codecs/json.js"(){({name:Rr,code:Pr,encode:Fr,decode:qr}={name:"json",code:512,encode:e=>new TextEncoder().encode(JSON.stringify(e)),decode:e=>JSON.parse(new TextDecoder().decode(e))})}}),Jr,Me,Ne,Oe,z,Be,K,Q,V,$,Ve,$e,Te,ht=d({"../../node_modules/multiformats/esm/src/cid.js"(){ne(),ie(),wr(),br(),I(),Jr=class f{constructor(r,t,s,n){this.code=t,this.version=r,this.multihash=s,this.bytes=n,this.byteOffset=n.byteOffset,this.byteLength=n.byteLength,this.asCID=this,this._baseCache=new Map,Object.defineProperties(this,{byteOffset:$,byteLength:$,code:V,version:V,multihash:V,bytes:V,_baseCache:$,asCID:$})}toV0(){switch(this.version){case 0:return this;default:{const{code:r,multihash:t}=this;if(r!==z)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(t.code!==Be)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return f.createV0(t)}}}toV1(){switch(this.version){case 0:{const{code:r,digest:t}=this.multihash,s=J(r,t);return f.createV1(this.code,s)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}equals(r){return r&&this.code===r.code&&this.version===r.version&&oe(this.multihash,r.multihash)}toString(r){const{bytes:t,version:s,_baseCache:n}=this;switch(s){case 0:return Ne(t,n,r||_.encoder);default:return Oe(t,n,r||M.encoder)}}toJSON(){return{code:this.code,version:this.version,hash:this.multihash.bytes}}get[Symbol.toStringTag](){return"CID"}[Symbol.for("nodejs.util.inspect.custom")](){return"CID("+this.toString()+")"}static isCID(r){return $e(/^0\.0/,Te),!!(r&&(r[Q]||r.asCID===r))}get toBaseEncodedString(){throw new Error("Deprecated, use .toString()")}get codec(){throw new Error('"codec" property is deprecated, use integer "code" property instead')}get buffer(){throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead")}get multibaseName(){throw new Error('"multibaseName" property is deprecated')}get prefix(){throw new Error('"prefix" property is deprecated')}static asCID(r){if(r instanceof f)return r;if(r!=null&&r.asCID===r){const{version:t,code:s,multihash:n,bytes:a}=r;return new f(t,s,n,a||K(t,s,n.bytes))}else if(r!=null&&r[Q]===!0){const{version:t,multihash:s,code:n}=r,a=ae(s);return f.create(t,n,a)}else return null}static create(r,t,s){if(typeof t!="number")throw new Error("String codecs are no longer supported");switch(r){case 0:if(t!==z)throw new Error(`Version 0 CID must use dag-pb (code: ${z}) block encoding`);return new f(r,t,s,s.bytes);case 1:{const n=K(r,t,s.bytes);return new f(r,t,s,n)}default:throw new Error("Invalid version")}}static createV0(r){return f.create(0,z,r)}static createV1(r,t){return f.create(1,r,t)}static decode(r){const[t,s]=f.decodeFirst(r);if(s.length)throw new Error("Incorrect length");return t}static decodeFirst(r){const t=f.inspectBytes(r),s=t.size-t.multihashSize,n=A(r.subarray(s,s+t.multihashSize));if(n.byteLength!==t.multihashSize)throw new Error("Incorrect length");const a=n.subarray(t.multihashSize-t.digestSize),o=new L(t.multihashCode,t.digestSize,a,n);return[t.version===0?f.createV0(o):f.createV1(t.codec,o),r.subarray(t.size)]}static inspectBytes(r){let t=0;const s=()=>{const[U,P]=k(r.subarray(t));return t+=P,U};let n=s(),a=z;if(n===18?(n=0,t=0):n===1&&(a=s()),n!==0&&n!==1)throw new RangeError(`Invalid CID version ${n}`);const o=t,c=s(),l=s(),j=t+l,u=j-o;return{version:n,codec:a,multihashCode:c,digestSize:l,multihashSize:u,size:j}}static parse(r,t){const[s,n]=Me(r,t),a=f.decode(n);return a._baseCache.set(s,r),a}},Me=(e,r)=>{switch(e[0]){case"Q":{const t=r||_;return[_.prefix,t.decode(`${_.prefix}${e}`)]}case _.prefix:{const t=r||_;return[_.prefix,t.decode(e)]}case M.prefix:{const t=r||M;return[M.prefix,t.decode(e)]}default:{if(r==null)throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");return[e[0],r.decode(e)]}}},Ne=(e,r,t)=>{const{prefix:s}=t;if(s!==_.prefix)throw Error(`Cannot string encode V0 in ${t.name} encoding`);const n=r.get(s);if(n==null){const a=t.encode(e).slice(1);return r.set(s,a),a}else return n},Oe=(e,r,t)=>{const{prefix:s}=t,n=r.get(s);if(n==null){const a=t.encode(e);return r.set(s,a),a}else return n},z=112,Be=18,K=(e,r,t)=>{const s=B(e),n=s+B(r),a=new Uint8Array(n+t.byteLength);return O(e,a,0),O(r,a,s),a.set(t,n),a},Q=Symbol.for("@ipld/js-cid/CID"),V={writable:!1,configurable:!1,enumerable:!0},$={writable:!1,enumerable:!1,configurable:!1},Ve="0.0.0-dev",$e=(e,r)=>{if(e.test(Ve))console.warn(r);else throw new Error(r)},Te=`CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`}}),bt=d({"../../node_modules/multiformats/esm/src/index.js"(){ht(),ne(),I(),de(),ie()}}),ft={};b(ft,{CID:()=>Jr,bases:()=>Hr,bytes:()=>ke,codecs:()=>Kr,digest:()=>Ir,hasher:()=>jr,hashes:()=>Gr,varint:()=>Ar});var Hr,Gr,Kr,pt=d({"../../node_modules/multiformats/esm/src/basics.js"(){Zr(),Yr(),et(),rt(),tt(),br(),st(),wr(),nt(),ot(),it(),dt(),ct(),bt(),Hr={...Je,...Ge,...Qe,...Xe,...Ye,...tr,...fr,...ur,...vr},Gr={...Ur,...Nr},Kr={raw:Br,json:kr}}});export{Hr as bases,ft as basics_exports,pt as init_basics};
